package com.promineotech.jeep.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import com.promineotech.jeep.entity.Color;
import com.promineotech.jeep.entity.Customer;
import com.promineotech.jeep.entity.Engine;
import com.promineotech.jeep.entity.Jeep;
import com.promineotech.jeep.entity.JeepModel;
import com.promineotech.jeep.entity.Tire;

@Component
public class DefaultJeepOrderDao implements JeepOrderDao {
	@Autowired
	private NamedParameterJdbcTemplate jdbcTemplate;
	
	/**
	 * 
	 */
	@Override
	public Customer fetchCustomer(String customerId) {
		String sql = ""
				+ "SELECT * "
				+ "FROM customers "
				+ "WHERE customer_id = :customer_id";
		
		Map<String, Object> params = new HashMap<>();
		params.put("customer_id",  customerId);
				
		return jdbcTemplate.query(sql, params, new CustomerResultSetExtracor());
	}

	/**
	 * 
	 * 
	 *
	 */
	@Override
	public Jeep fetchModel(JeepModel model, String trim, int doors) {
		// @formatter:off
		String sql = ""
				+ "SELECT * "
				+ "FROM models "
				+ "WHERE model_id = :model_id "
				+ "AND trim_level = :trim_level "
				+ "AND num_doors = :num_doors";
		// @formatter:on
		Map<String, Object> params = new HashMap<>();
		params.put("model_id",  model.toString());
		params.put("trim_level", trim);
		params.put("num_doors", doors);
		
		return jdbcTemplate.query(sql, params, new ModelResultSetExtracor());
	}
	
	/**
	 * 
	 * 
	 *
	 */
	@Override
	public Color fetchColor(String colorId) {
		// @formatter:off
		String sql = ""
				+ "SELECT * "
				+ "FROM colors "
				+ "WHERE color_id = :color_id";
		// @formatter:on
		Map<String, Object> params = new HashMap<>();
		params.put("color_id", color_id);
		
		return jdbcTemplate.query(sql, params, new ColorResultSetExtracor());
	}
	/**
	 * 
	 */
	@Override
	public Engine fetchEngine(String engineId) {
		// @formatter:off
		String sql = ""
				+ "SELECT * "
				+ "FROM engines "
				+ "WHERE engine_id = :engine_id";
		// @formatter:on
		Map<String, Object> params = new HashMap<>();
		params.put("engine_id", engineId);
				
		return jdbcTemplate.query(sql, params, new EngineResultSetExtracor());
		}
	/**
	 * 
	 */
	@Override
	public Tire fetchTire(String tireId) {
		// @formatter:off
		String sql = ""
				+ "SELECT * "
				+ "FROM tires "
				+ "WHERE tire_id = :tire_id";
		// @formatter:on
		Map<String, Object> params = new HashMap<>();
		params.put("tire_id", tireId);
				
		return jdbcTemplate.query(sql, params, new TireResultSetExtracor());
		}
	
	}
	

	class CustomerResultSetExtracor implements ResultSetExtractor<Customer> {
			@Override
			public Customer extractData(ResultSet rs)
					throws SQLException, DataAccessException {
				rs.next();
				// @formatter:off
				return Customer.builder()
						.customerId(rs.getString("customer_id"))
						.customerPK(rs.getLong("customer_pk"))
						.firstName(rs.getString("first_name"))
						.lastName(rs.getString("last_name"))
						.phone(rs.getString("phone"))
						.build();
				// @formatter:on
			}}
	class TireResultSetExtracor implements ResultSetExtractor<Tire> {
		@Override
		public Tire extractData(ResultSet rs)
				throws SQLException, DataAccessException {
			rs.next();
			// @formatter:off
			return Tire.builder()
					.manufacturer(rs.getString("manufacturer"))
					.price(rs.getBigDecimal("price"))
					.tireId(rs.getString("tire_id"))
					.tirePk(rs.getLong("tire_pk"))
					.tireSize(rs.getString("tire_size"))
					.warrantyMiles(rs.getInt("warranty_miles"))
					.build();
			// @formatter:on
		}}
	
		
		
	}

